// Package twelve generates lyrics for the "The Twelve Days of Christmas" song.
// It provides functions to create individual verses for a given day and the full song,
// following the traditional English Christmas carol structure where each verse
// builds cumulatively on the previous one, listing gifts from the current day
// down to the first.
package twelve

import (
	"fmt"
	"strings"
)

// gifts holds the gifts for each day of Christmas, indexed by day (1-based).
// The empty string at index 0 serves as a filler to align with 1-based day indices.
// This slice is used by Verse to retrieve the correct gift descriptions.
var gifts = []string{
	"", // 0-based index filler
	"a Partridge in a Pear Tree",
	"two Turtle Doves",
	"three French Hens",
	"four Calling Birds",
	"five Gold Rings",
	"six Geese-a-Laying",
	"seven Swans-a-Swimming",
	"eight Maids-a-Milking",
	"nine Ladies Dancing",
	"ten Lords-a-Leaping",
	"eleven Pipers Piping",
	"twelve Drummers Drumming",
}

// dayWords maps day numbers to their ordinal English words (e.g., "first", "second").
// The empty string at index 0 aligns with 1-based day indices.
// This slice is used to format the day in each verse.
var dayWords = []string{
	"", // 0-based index filler
	"first",
	"second",
	"third",
	"fourth",
	"fifth",
	"sixth",
	"seventh",
	"eighth",
	"ninth",
	"tenth",
	"eleventh",
	"twelfth",
}

// Verse generates the lyrics for the i-th day of Christmas.
// It returns a string containing the complete verse, listing gifts from day i down to day 1.
// If i is out of range (i < 1 or i > 12), it returns an empty string to handle invalid inputs gracefully.
// The verse format is: "On the [ordinal] day of Christmas my true love gave to me: [gifts], and [gift1]."
func Verse(i int) string {
	// Validate input: return empty string for invalid day numbers.
	// Since Verse returns only a string, we can't return an error, so an empty string is a safe default.
	if i < 1 || i > 12 {
		return ""
	}

	// Use strings.Builder for efficient string concatenation.
	// This avoids creating intermediate strings, improving performance.
	var b strings.Builder

	// Write the verse prefix with the ordinal day (e.g., "On the first day...").
	// We use dayWords[i] to get the correct ordinal word.
	b.WriteString(fmt.Sprintf("On the %s day of Christmas my true love gave to me: ", dayWords[i]))

	// Build the list of gifts in reverse order (from day i down to day 1).
	// We collect gifts in a slice to join them with commas later.
	giftParts := make([]string, 0, i)
	for j := i; j >= 1; j-- {
		// Get the gift for day j (e.g., "two Turtle Doves").
		gift := gifts[j]
		// For the first gift (j=1) in verses with multiple gifts (i>1), prepend "and ".
		// This matches the song's grammar (e.g., "...and a Partridge in a Pear Tree").
		if j == 1 && i > 1 {
			gift = "and " + gift
		}
		giftParts = append(giftParts, gift)
	}

	// Join gifts with commas and spaces, then append a period.
	// strings.Join is efficient and handles the comma placement correctly.
	b.WriteString(strings.Join(giftParts, ", "))
	b.WriteString(".")

	// Return the complete verse as a string.
	return b.String()
}

// Song generates the full lyrics for "The Twelve Days of Christmas".
// It concatenates all 12 verses (from day 1 to day 12), separated by single newlines.
// The output matches the exact lyrics provided, with each verse generated by Verse.
func Song() string {
	// Create a slice to hold all verses.
	var verses []string

	// Generate verses for days 1 through 12.
	// Since we control the input (i from 1 to 12), Verse will never return an empty string.
	for i := 1; i <= 12; i++ {
		verse := Verse(i)
		verses = append(verses, verse)
	}

	// Join verses with single newlines to match the expected song format.
	// This ensures no extra blank lines appear between verses.
	return strings.Join(verses, "\n")
}
